diff --git a/dom/media/webaudio/AlignedTArray.h b/dom/media/webaudio/AlignedTArray.h
index c5ecc11b7b4e..f5a4ec6c3c9d 100644
--- a/dom/media/webaudio/AlignedTArray.h
+++ b/dom/media/webaudio/AlignedTArray.h
@@ -31,9 +31,17 @@ class AlignedTArray_Impl : public nsTArray_Impl<E, Alloc>
   elem_type& operator[](index_type i) { return Elements()[i];}
   const elem_type& operator[](index_type i) const { return Elements()[i]; }
 
-  typename Alloc::ResultType SetLength(size_type newLen) {
-    return base_type::SetLength(newLen + sExtra);
+  void SetLength(size_type newLen)
+  {
+    base_type::SetLength(newLen + sExtra);
   }
+
+  MOZ_WARN_UNUSED_RESULT
+  bool SetLength(size_type newLen, const mozilla::fallible_t&)
+  {
+    return base_type::SetLength(newLen + sExtra, mozilla::fallible);
+  }
+
   size_type Length() const {
     return base_type::Length() <= sExtra ? 0 : base_type::Length() - sExtra;
   }
diff --git a/dom/media/webaudio/AnalyserNode.cpp b/dom/media/webaudio/AnalyserNode.cpp
index 36bc2712f86e..c803a0c519ff 100644
--- a/dom/media/webaudio/AnalyserNode.cpp
+++ b/dom/media/webaudio/AnalyserNode.cpp
@@ -255,7 +255,7 @@ AnalyserNode::FFTAnalysis()
   if (mWriteIndex == 0) {
     inputBuffer = mBuffer.Elements();
   } else {
-    if (!tmpBuffer.SetLength(FftSize())) {
+    if (!tmpBuffer.SetLength(FftSize(), fallible)) {
       return false;
     }
     inputBuffer = tmpBuffer.Elements();
@@ -301,13 +301,13 @@ AnalyserNode::AllocateBuffer()
 {
   bool result = true;
   if (mBuffer.Length() != FftSize()) {
-    if (!mBuffer.SetLength(FftSize())) {
+    if (!mBuffer.SetLength(FftSize(), fallible)) {
       return false;
     }
     memset(mBuffer.Elements(), 0, sizeof(float) * FftSize());
     mWriteIndex = 0;
 
-    if (!mOutputBuffer.SetLength(FrequencyBinCount())) {
+    if (!mOutputBuffer.SetLength(FrequencyBinCount(), fallible)) {
       return false;
     }
     memset(mOutputBuffer.Elements(), 0, sizeof(float) * FrequencyBinCount());
