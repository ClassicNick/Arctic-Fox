diff --git a/js/src/asmjs/AsmJS.cpp b/js/src/asmjs/AsmJS.cpp
index 0a2da2885490..4b3112b0370d 100644
--- a/js/src/asmjs/AsmJS.cpp
+++ b/js/src/asmjs/AsmJS.cpp
@@ -412,6 +412,12 @@ class js::AsmJSModule final : public Module
         *data += mallocSizeOf(link_.get()) + link_->sizeOfExcludingThis(mallocSizeOf);
         *data += mallocSizeOf(module_.get()) + module_->sizeOfExcludingThis(mallocSizeOf);
     }
+    virtual bool mutedErrors() const override {
+        return scriptSource()->mutedErrors();
+    }
+    virtual const char16_t* displayURL() const override {
+        return scriptSource()->hasDisplayURL() ? scriptSource()->displayURL() : nullptr;
+    }
 
     uint32_t minHeapLength() const { return module_->minHeapLength; }
     uint32_t numFFIs() const { return module_->numFFIs; }
@@ -2237,8 +2243,6 @@ class MOZ_STACK_CLASS ModuleValidator
                                 ? HeapUsage::Shared
                                 : HeapUsage::Unshared;
 
-        auto muted = MutedErrorsBool(parser_.ss->mutedErrors());
-
         CacheableChars filename;
         if (parser_.ss->filename()) {
             filename = DuplicateString(parser_.ss->filename());
@@ -2246,13 +2250,6 @@ class MOZ_STACK_CLASS ModuleValidator
                 return false;
         }
 
-        CacheableTwoByteChars displayURL;
-        if (parser_.ss->hasDisplayURL()) {
-            displayURL = DuplicateString(parser_.ss->displayURL());
-            if (!displayURL)
-                return false;
-        }
-
         uint32_t endBeforeCurly = tokenStream().currentToken().pos.end;
         module_->srcLength = endBeforeCurly - module_->srcStart;
 
@@ -2263,7 +2260,7 @@ class MOZ_STACK_CLASS ModuleValidator
 
         UniqueModuleData base;
         UniqueStaticLinkData link;
-        if (!mg_.finish(heap, muted, Move(filename), Move(displayURL), &base, &link, slowFuncs))
+        if (!mg_.finish(heap, Move(filename), &base, &link, slowFuncs))
             return false;
 
         moduleObj.set(WasmModuleObject::create(cx_));
diff --git a/js/src/asmjs/WasmGenerator.cpp b/js/src/asmjs/WasmGenerator.cpp
index 01e41370be78..b9eb38427eb1 100644
--- a/js/src/asmjs/WasmGenerator.cpp
+++ b/js/src/asmjs/WasmGenerator.cpp
@@ -589,9 +589,7 @@ ModuleGenerator::defineOutOfBoundsStub(Offsets offsets)
 
 bool
 ModuleGenerator::finish(HeapUsage heapUsage,
-                        MutedErrorsBool mutedErrors,
                         CacheableChars filename,
-                        CacheableTwoByteChars displayURL,
                         UniqueModuleData* module,
                         UniqueStaticLinkData* linkData,
                         SlowFunctionVector* slowFuncs)
@@ -600,7 +598,6 @@ ModuleGenerator::finish(HeapUsage heapUsage,
     MOZ_ASSERT(finishedFuncs_);
 
     module_->heapUsage = heapUsage;
-    module_->mutedErrors = mutedErrors;
     module_->filename = Move(filename);
 
     if (!GenerateStubs(*this, UsesHeap(heapUsage)))
diff --git a/js/src/asmjs/WasmGenerator.h b/js/src/asmjs/WasmGenerator.h
index 0308a39ed5e5..26cf9a2a65d0 100644
--- a/js/src/asmjs/WasmGenerator.h
+++ b/js/src/asmjs/WasmGenerator.h
@@ -201,9 +201,7 @@ class MOZ_STACK_CLASS ModuleGenerator
     // StaticLinkData required to call Module::staticallyLink, and the list of
     // functions that took a long time to compile.
     bool finish(HeapUsage heapUsage,
-                MutedErrorsBool mutedErrors,
                 CacheableChars filename,
-                CacheableTwoByteChars displayURL,
                 UniqueModuleData* module,
                 UniqueStaticLinkData* staticLinkData,
                 SlowFunctionVector* slowFuncs);
diff --git a/js/src/asmjs/WasmModule.cpp b/js/src/asmjs/WasmModule.cpp
index a172ee68ab5c..d541df91f4da 100644
--- a/js/src/asmjs/WasmModule.cpp
+++ b/js/src/asmjs/WasmModule.cpp
@@ -401,69 +401,54 @@ CodeRange::CodeRange(uint32_t nameIndex, uint32_t lineNumber, FuncOffsets offset
     end_ = offsets.end;
 }
 
-static inline size_t StringLength(const char *s) { return s ? strlen(s) : 0; }
-static inline size_t StringLength(const char16_t *s) { return s ? js_strlen(s) : 0; }
-
-template <class CharT>
 size_t
-CacheableUniquePtr<CharT>::serializedSize() const
+CacheableChars::serializedSize() const
 {
-    return sizeof(uint32_t) + StringLength(this->get()) * sizeof(CharT);
+    return sizeof(uint32_t) + strlen(get());
 }
 
-template <class CharT>
 uint8_t*
-CacheableUniquePtr<CharT>::serialize(uint8_t* cursor) const
+CacheableChars::serialize(uint8_t* cursor) const
 {
-    uint32_t length = StringLength(this->get());
+    uint32_t length = strlen(get());
     cursor = WriteBytes(cursor, &length, sizeof(uint32_t));
-    cursor = WriteBytes(cursor, this->get(), length * sizeof(CharT));
+    cursor = WriteBytes(cursor, get(), length);
     return cursor;
 }
 
-template <class CharT>
 const uint8_t*
-CacheableUniquePtr<CharT>::deserialize(ExclusiveContext* cx, const uint8_t* cursor)
+CacheableChars::deserialize(ExclusiveContext* cx, const uint8_t* cursor)
 {
     uint32_t length;
     cursor = ReadBytes(cursor, &length, sizeof(uint32_t));
 
-    this->reset(cx->pod_calloc<CharT>(length + 1));
-    if (!this->get())
+    reset(cx->pod_calloc<char>(length + 1));
+    if (!get())
         return nullptr;
 
-    cursor = ReadBytes(cursor, this->get(), length * sizeof(CharT));
+    cursor = ReadBytes(cursor, get(), length);
     return cursor;
 }
 
-template <class CharT>
 bool
-CacheableUniquePtr<CharT>::clone(JSContext* cx, CacheableUniquePtr* out) const
+CacheableChars::clone(JSContext* cx, CacheableChars* out) const
 {
-    uint32_t length = StringLength(this->get());
+    uint32_t length = strlen(get());
 
-    UPtr chars(cx->pod_calloc<CharT>(length + 1));
+    UniqueChars chars(cx->pod_calloc<char>(length + 1));
     if (!chars)
         return false;
 
-    PodCopy(chars.get(), this->get(), length);
+    PodCopy(chars.get(), get(), length);
 
     *out = Move(chars);
     return true;
 }
 
-template <class CharT>
 size_t
-CacheableUniquePtr<CharT>::sizeOfExcludingThis(MallocSizeOf mallocSizeOf) const
+CacheableChars::sizeOfExcludingThis(MallocSizeOf mallocSizeOf) const
 {
-    return mallocSizeOf(this->get());
-}
-
-namespace js {
-namespace wasm {
-template struct CacheableUniquePtr<char>;
-template struct CacheableUniquePtr<char16_t>;
-}
+    return mallocSizeOf(get());
 }
 
 size_t
@@ -519,8 +504,7 @@ ModuleData::serializedSize() const
            SerializedPodVectorSize(codeRanges) +
            SerializedPodVectorSize(callSites) +
            SerializedVectorSize(funcNames) +
-           filename.serializedSize() +
-           displayURL.serializedSize();
+           filename.serializedSize();
 }
 
 uint8_t*
@@ -535,7 +519,6 @@ ModuleData::serialize(uint8_t* cursor) const
     cursor = SerializePodVector(cursor, callSites);
     cursor = SerializeVector(cursor, funcNames);
     cursor = filename.serialize(cursor);
-    cursor = displayURL.serialize(cursor);
     return cursor;
 }
 
@@ -555,8 +538,7 @@ ModuleData::deserialize(ExclusiveContext* cx, const uint8_t* cursor)
     (cursor = DeserializePodVector(cx, cursor, &codeRanges)) &&
     (cursor = DeserializePodVector(cx, cursor, &callSites)) &&
     (cursor = DeserializeVector(cx, cursor, &funcNames)) &&
-    (cursor = filename.deserialize(cx, cursor)) &&
-    (cursor = displayURL.deserialize(cx, cursor));
+    (cursor = filename.deserialize(cx, cursor));
     return cursor;
 }
 
@@ -576,8 +558,7 @@ ModuleData::clone(JSContext* cx, ModuleData* out) const
            ClonePodVector(cx, codeRanges, &out->codeRanges) &&
            ClonePodVector(cx, callSites, &out->callSites) &&
            CloneVector(cx, funcNames, &out->funcNames) &&
-           filename.clone(cx, &out->filename) &&
-           displayURL.clone(cx, &out->displayURL);
+           filename.clone(cx, &out->filename);
 }
 
 size_t
@@ -590,8 +571,7 @@ ModuleData::sizeOfExcludingThis(MallocSizeOf mallocSizeOf) const
            codeRanges.sizeOfExcludingThis(mallocSizeOf) +
            callSites.sizeOfExcludingThis(mallocSizeOf) +
            funcNames.sizeOfExcludingThis(mallocSizeOf) +
-           filename.sizeOfExcludingThis(mallocSizeOf) +
-           displayURL.sizeOfExcludingThis(mallocSizeOf);
+           filename.sizeOfExcludingThis(mallocSizeOf);
 }
 
 uint8_t*
@@ -874,7 +854,7 @@ Module::~Module()
     }
 }
 
-void
+/* virtual */ void
 Module::trace(JSTracer* trc)
 {
     for (const Import& import : imports()) {
@@ -886,6 +866,34 @@ Module::trace(JSTracer* trc)
         TraceEdge(trc, &heap_, "wasm buffer");
 }
 
+/* virtual */ void
+Module::addSizeOfMisc(MallocSizeOf mallocSizeOf, size_t* code, size_t* data)
+{
+    *code += codeBytes();
+    *data += mallocSizeOf(this) +
+             globalBytes() +
+             mallocSizeOf(module_.get()) +
+             module_->sizeOfExcludingThis(mallocSizeOf) +
+             funcPtrTables_.sizeOfExcludingThis(mallocSizeOf) +
+             SizeOfVectorExcludingThis(funcLabels_, mallocSizeOf);
+}
+
+/* virtual */ bool
+Module::mutedErrors() const
+{
+    // WebAssembly code is always CORS-same-origin and so errors are never
+    // muted. For asm.js, muting depends on the ScriptSource containing the
+    // asm.js so this function is overridden by AsmJSModule.
+    return false;
+}
+
+/* virtual */ const char16_t*
+Module::displayURL() const
+{
+    // WebAssembly code does not have `//# sourceURL`.
+    return nullptr;
+}
+
 bool
 Module::containsFunctionPC(void* pc) const
 {
@@ -1402,18 +1410,6 @@ Module::profilingLabel(uint32_t funcIndex) const
     return funcLabels_[funcIndex].get();
 }
 
-void
-Module::addSizeOfMisc(MallocSizeOf mallocSizeOf, size_t* code, size_t* data)
-{
-    *code += codeBytes();
-    *data += mallocSizeOf(this) +
-             globalBytes() +
-             mallocSizeOf(module_.get()) +
-             module_->sizeOfExcludingThis(mallocSizeOf) +
-             funcPtrTables_.sizeOfExcludingThis(mallocSizeOf) +
-             SizeOfVectorExcludingThis(funcLabels_, mallocSizeOf);
-}
-
 const Class WasmModuleObject::class_ = {
     "WasmModuleObject",
     JSCLASS_IS_ANONYMOUS | JSCLASS_DELAY_METADATA_CALLBACK |
diff --git a/js/src/asmjs/WasmModule.h b/js/src/asmjs/WasmModule.h
index 6d59223132af..788f62dbfecb 100644
--- a/js/src/asmjs/WasmModule.h
+++ b/js/src/asmjs/WasmModule.h
@@ -290,22 +290,18 @@ class CodeRange
 
 typedef Vector<CodeRange, 0, SystemAllocPolicy> CodeRangeVector;
 
-// A CacheableUniquePtr is used to cacheably store strings in Module.
+// CacheableChars is used to cacheably store UniqueChars.
 
-template <class CharT>
-struct CacheableUniquePtr : public UniquePtr<CharT[], JS::FreePolicy>
+struct CacheableChars : UniqueChars
 {
-    typedef UniquePtr<CharT[], JS::FreePolicy> UPtr;
-    explicit CacheableUniquePtr(CharT* ptr) : UPtr(ptr) {}
-    MOZ_IMPLICIT CacheableUniquePtr(UPtr&& rhs) : UPtr(Move(rhs)) {}
-    CacheableUniquePtr() = default;
-    CacheableUniquePtr(CacheableUniquePtr&& rhs) : UPtr(Move(rhs)) {}
-    void operator=(CacheableUniquePtr&& rhs) { UPtr& base = *this; base = Move(rhs); }
-    WASM_DECLARE_SERIALIZABLE(CacheableUniquePtr)
+    CacheableChars() = default;
+    explicit CacheableChars(char* ptr) : UniqueChars(ptr) {}
+    MOZ_IMPLICIT CacheableChars(UniqueChars&& rhs) : UniqueChars(Move(rhs)) {}
+    CacheableChars(CacheableChars&& rhs) : UniqueChars(Move(rhs)) {}
+    void operator=(CacheableChars&& rhs) { UniqueChars::operator=(Move(rhs)); }
+    WASM_DECLARE_SERIALIZABLE(CacheableChars)
 };
 
-typedef CacheableUniquePtr<char> CacheableChars;
-typedef CacheableUniquePtr<char16_t> CacheableTwoByteChars;
 typedef Vector<CacheableChars, 0, SystemAllocPolicy> CacheableCharsVector;
 
 // The ExportMap describes how Exports are mapped to the fields of the export
@@ -362,14 +358,6 @@ enum ModuleKind
     AsmJS
 };
 
-// See mutedErrors comment in jsapi.h.
-
-enum class MutedErrorsBool
-{
-    DontMuteErrors = false,
-    MuteErrors = true
-};
-
 // ModuleCacheablePod holds the trivially-memcpy()able serializable portion of
 // ModuleData.
 
@@ -380,7 +368,6 @@ struct ModuleCacheablePod
     uint32_t              globalBytes;
     ModuleKind            kind;
     HeapUsage             heapUsage;
-    MutedErrorsBool       mutedErrors;
     CompileArgs           compileArgs;
 
     uint32_t totalBytes() const { return codeBytes + globalBytes; }
@@ -404,7 +391,6 @@ struct ModuleData : ModuleCacheablePod
     CallSiteVector        callSites;
     CacheableCharsVector  funcNames;
     CacheableChars        filename;
-    CacheableTwoByteChars displayURL;
     bool                  loadedFromCache;
 
     WASM_DECLARE_SERIALIZABLE(ModuleData);
@@ -507,13 +493,11 @@ class Module
     HeapUsage heapUsage() const { return module_->heapUsage; }
     bool usesHeap() const { return UsesHeap(module_->heapUsage); }
     bool hasSharedHeap() const { return module_->heapUsage == HeapUsage::Shared; }
-    bool mutedErrors() const { return bool(module_->mutedErrors); }
     CompileArgs compileArgs() const { return module_->compileArgs; }
     const ImportVector& imports() const { return module_->imports; }
     const ExportVector& exports() const { return module_->exports; }
     const char* functionName(uint32_t i) const { return module_->funcNames[i].get(); }
     const char* filename() const { return module_->filename.get(); }
-    const char16_t* displayURL() const { return module_->displayURL.get(); }
     bool loadedFromCache() const { return module_->loadedFromCache; }
     bool staticallyLinked() const { return staticallyLinked_; }
     bool dynamicallyLinked() const { return dynamicallyLinked_; }
@@ -526,6 +510,8 @@ class Module
     bool isAsmJS() const { return module_->kind == ModuleKind::AsmJS; }
     AsmJSModule& asAsmJS() { MOZ_ASSERT(isAsmJS()); return *(AsmJSModule*)this; }
     const AsmJSModule& asAsmJS() const { MOZ_ASSERT(isAsmJS()); return *(const AsmJSModule*)this; }
+    virtual bool mutedErrors() const;
+    virtual const char16_t* displayURL() const;
 
     // The range [0, functionBytes) is a subrange of [0, codeBytes) that
     // contains only function body code, not the stub code. This distinction is
